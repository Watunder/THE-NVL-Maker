// Utils_graphics.tjs - 一组用于Layer的图形绘制函数
// 作者：希德船长 修改、发布自由
// 适用于KAG3 3.28



// 包含下列函数：

//function drawLine(layer, xstart, ystart, xend, yend, color)
// 画直线(Bresenham算法)
// layer 			目标Layer
// xstart			起点横坐标
// ystart			起点纵坐标
// xend				终点横坐标
// yend				终点纵坐标
// color			颜色(0xAARRGGBB)
// 注 上面的坐标参数都是以图层中的图像为参照的，而不是以图层为参照。当然，通常情况下，图层中的图像和图层本身的位置/尺寸是相同的



//function drawCircle(layer, xc, yc, r, color, fill = false)
// 画圆(Bresenham算法)
// layer 			目标Layer
// x				圆心横坐标
// y				圆心纵坐标
// r				半径
// color			颜色(0xAARRGGBB)
// fill				是否填充(默认为false)
// 注 上面的坐标参数都是以图层中的图像为参照的，而不是以图层为参照。当然，通常情况下，图层中的图像和图层本身的位置/尺寸是相同的



//function drawPolygon(layer, points, color, fill = false)
// 画多边形(扫描线法，但是顶点处的判断有些不一样)
// layer 			目标Layer
// points			顶点坐标的数组(格式为[x1, y1, x2, y2, ...])
// color			颜色(0xAARRGGBB)
// fill				是否填充(默认为false)
// 注 上面的坐标参数都是以图层中的图像为参照的，而不是以图层为参照。当然，通常情况下，图层中的图像和图层本身的位置/尺寸是相同的



//function drawBezier(layer, points, color)
// 根据多个点绘制连续曲线
// 这个函数是基于bezier曲线的(主要是3次bezier曲线)。但是，因为有多条bezier曲线相连接的连接点存在，这些连接点的位置的曲线可能并不平滑。
// layer 			目标Layer
// points			各个点的坐标的数组(格式为[x1, y1, x2, y2, ...])至少3个点
// color			颜色(0xAARRGGBB)
// 注 上面的坐标参数都是以图层中的图像为参照的，而不是以图层为参照。当然，通常情况下，图层中的图像和图层本身的位置/尺寸是相同的


















// 下面是具体的代码



// 画直线(Bresenham算法)
// layer 			目标Layer
// xstart			起点横坐标
// ystart			起点纵坐标
// xend				终点横坐标
// yend				终点纵坐标
// color			颜色(0xAARRGGBB)
// 注 上面的坐标参数都是以图层中的图像为参照的，而不是以图层为参照。当然，通常情况下，图层中的图像和图层本身的位置/尺寸是相同的
function drawLine(layer, xstart, ystart, xend, yend, color)
{
	if(layer === void)
		return;

	var x1 = xstart;
	var x2 = xend;
	var y1 = ystart;
	var y2 = yend;
	
	if(x1 == x2)
	{
		if(y1 > y2)
		{
			y1 = yend;
			y2 = ystart;
		}
		layer.fillRect(x1, y1, 1, y2 - y1 + 1, color);
		return;
	}
	if(y1 == y2)
	{
		if(x1 > x2)
		{
			x1 = xend;
			x2 = xstart;
		}
		layer.fillRect(x1, y1, x2 - x1 + 1, 1, color);
		return;
	}
	
	var x, y, dx, dy, half, sub, i, flag;

	dx = x2 - x1;
	dy = y2 - y1; 

	if(Math.abs(dy) < Math.abs(dx))
	{
		if(dx < 0)
		{
			i = x1;
			x1 = x2;
			x2 = i;
			i = y1;
			y1 = y2;
			y2 = i;
			dx = -dx;
			dy = -dy;
		}
		if(dy < 0)
			flag = -1;
		else
			flag = 1;
		dy = Math.abs(dy);
		half = dx >> 1;
		sub = 0;
		
		x = x1;
		y = y1;
		for(i = 0; i <= dx; i++)
		{
			layer.fillRect(x, y, 1, 1, color);
			x++;
			sub += dy;
			if(sub > half)
			{
				sub -= dx;
				y += flag;
			}
		}
	}
	else
	{
		if(dy < 0)
		{
			i = x1;
			x1 = x2;
			x2 = i;
			i = y1;
			y1 = y2;
			y2 = i;
			dx = -dx;
			dy = -dy;
		}
		if(dx < 0)
			flag = -1;
		else
			flag = 1;
		dx = Math.abs(dx);
		half = dy >> 1;
		sub = 0;

		x = x1;
		y = y1;
		for(i = 0; i <= dy; i++)
		{
			layer.fillRect(x, y, 1, 1, color);
			y++;
			sub += dx;
			if(sub > half)
			{
				sub -= dy;
				x += flag;
			}
		}
	}
}

// 画圆(Bresenham算法)
// layer 			目标Layer
// x				圆心横坐标
// y				圆心纵坐标
// r				半径
// color			颜色(0xAARRGGBB)
// fill				是否填充(默认为false)
// 注 上面的坐标参数都是以图层中的图像为参照的，而不是以图层为参照。当然，通常情况下，图层中的图像和图层本身的位置/尺寸是相同的
function drawCircle(layer, xc, yc, r, color, fill = false)
{
	if(layer === void)
		return;

	var x = 0;
	var y = r;
	var p = 3 - 2 * r;

    if(fill) // 填充
    {
    	while (x <= y)
        {
        	layer.fillRect(xc - x, yc + y, 2 * x + 1, 1, color);
        	layer.fillRect(xc - x, yc - y, 2 * x + 1, 1, color);
        	layer.fillRect(xc - y, yc + x, 2 * y + 1, 1, color);
        	layer.fillRect(xc - y, yc - x, 2 * y + 1, 1, color);

	        if (p < 0)
	        {
	        	p = p + 4 * x + 6;
	        }
	        else
	        {
				p = p + 4* (x - y) + 10;
				y-=1;
			}
	        x+=1;
       	}
    }
    else // 不填充
    {
		while (x <= y)
		{
	        layer.fillRect(xc + x, yc + y, 1, 1, color);
	        layer.fillRect(xc - x, yc + y, 1, 1, color);
	        layer.fillRect(xc + x, yc - y, 1, 1, color);
	        layer.fillRect(xc - x, yc - y, 1, 1, color);
	        layer.fillRect(xc + y, yc + x, 1, 1, color);
	        layer.fillRect(xc - y, yc + x, 1, 1, color);
	        layer.fillRect(xc + y, yc - x, 1, 1, color);
	        layer.fillRect(xc - y, yc - x, 1, 1, color);

	        if (p < 0)
	        {
	        	p = p + 4 * x + 6;
	        }
	        else
	        {
				p = p + 4* (x - y) + 10;
				y-=1;
			}
	        x+=1;
		}
	}
}



// 画多边形(扫描线法，但是顶点处的判断有些不一样)
// layer 			目标Layer
// points			顶点坐标的数组(格式为[x1, y1, x2, y2, ...])
// color			颜色(0xAARRGGBB)
// fill				是否填充(默认为false)
// 注 上面的坐标参数都是以图层中的图像为参照的，而不是以图层为参照。当然，通常情况下，图层中的图像和图层本身的位置/尺寸是相同的
function drawPolygon(layer, points, color, fill = false)
{
	if(layer === void || !(points instanceof "Array") || points.count < 6)
		return;

	if(fill) // 填充
	{
		var ymin = points[1];
		var ymax = points[1];
		var lines = [];
		var linenum = points.count \ 2;
		var i, j, idx = 0;
		var ystart, yend, xstart, xend;
		
		var pointstemp = [];
		pointstemp.assign(points);
		if(pointstemp.count % 2 == 1)
			pointstemp.erase(pointstemp.count - 1);
		pointstemp.add(pointstemp[0]);
		pointstemp.add(pointstemp[1]);
		
		for(i = 0; i < linenum; i++) // 准备多边形各个边的数据
		{
			if(pointstemp[idx + 1] < pointstemp[idx + 3])
			{
				xstart = pointstemp[idx];
				xend = pointstemp[idx + 2];
				ystart = pointstemp[idx + 1];
				yend = pointstemp[idx + 3];
			}
			else if(pointstemp[idx + 1] > pointstemp[idx + 3])
			{
				xstart = pointstemp[idx + 2];
				xend = pointstemp[idx];
				ystart = pointstemp[idx + 3];
				yend = pointstemp[idx + 1];
			}
			else // 水平线就直接舍掉了
			{
				idx += 2;
				continue;
			}
			if(ystart < ymin)
				ymin = ystart;
			if(yend > ymax)
				ymax = yend;
			lines.add([ystart, yend, xstart, (xend - xstart) / (yend - ystart)]);
			idx += 2;
		}
		
		var nodes = [];
		var x, xs, xd, y, yl, yr;
		for(i = ymin; i <= ymax; i++)
		{
			nodes.clear();
			for(j = 0; j < lines.count; j++) // 计算扫描线与多边形各边的交点
			{
				if(i <= lines[j][0] || i >= lines[j][1])
					continue;
				lines[j][2] += lines[j][3];
				nodes.add((int)(lines[j][2] + 0.5));
			}
			// 判断这个点是不是顶点,是的话,判断应算几个点,然后插入到nodes中
			// 顶点的两个边在扫描线两侧则计1个点,在同侧计2个点,如果遇到与扫描线平行的边,根据这条边后面的不平行的边的状态判断左端应为1个还是2个点，右端计0个点，并提前把这条边画上去
			idx = 0;
			for(j = 0; j < linenum; j++)
			{
				x = pointstemp[idx];
				y = pointstemp[idx + 1];
				if(y != i)
				{
					idx += 2;
					continue;
				}
				if(j == 0)
					yl = pointstemp[linenum * 2 - 1];
				else
					yl = pointstemp[idx - 1];
				yr = pointstemp[idx + 3];
				
				if(y > yl && y > yr || y < yl && y < yr)
				{
					nodes.add(x);
					nodes.add(x);
					//dm(x + " -_- 2");
				}
				else if(y > yl && y < yr || y < yl && y > yr)
				{
					nodes.add(x);
					//dm(x + " -_ 1");
				}
				else
				{
					if(y != yl && y == yr)
					{
						while(y == yr)
						{
							idx += 2;
							j++;
							if(idx >= linenum * 2)
								idx = 0;
							yr = pointstemp[idx + 3];
							if(yr != y)
							{
								if(x > pointstemp[idx])
								{
									xs = pointstemp[idx];
									xd = x;
								}
								else
								{
									xs = x;
									xd = pointstemp[idx];
								}
								layer.fillRect(xs, y, xd - xs + 1, 1, color);
							}
						}
						if(y > yl && y > yr || y < yl && y < yr)
						{
							nodes.add(x);
							nodes.add(x);
							//dm(x + " _--_ 2");
						}
						else
						{
							nodes.add(x);
							//dm(x + " ---_ 1");
						}
					}
				}
				idx += 2;
			}
			nodes.sort();
			
			for(j = 0; j < nodes.count; j += 2) // 填充
			{
				layer.fillRect(nodes[j], i, nodes[j + 1] - nodes[j] + 1, 1, color);
			}
		}
	}
	else // 不填充，用直线来画就行了
	{
		var idx = 0;
		var endidx = points.count \ 2 - 1;
		for(var i = 0; i < endidx; i++)
		{
			drawLine(layer, points[idx], points[idx + 1], points[idx + 2], points[idx + 3], color);
			idx += 2;
		}
		drawLine(layer, points[idx], points[idx + 1], points[0], points[1], color);
	}
}

// 生成bezier曲线轨迹
// 用的是原始的bezier曲线方程，没怎么在算法上作优化
// 这个函数是为了后面的drawBezier服务的。一般用不着直接调用这一函数
// needpointnum 需要计算的点的数量
// selectedpoint 如果这个参数 >=0 则只返回以该参数为序号的点
// points 各个控制点的坐标，3个或4个点
function getBezierPoints(needpointnum, selectedpoint, points)
{
	var x0 = points[0];
	var y0 = points[1];
	var x1 = points[2];
	var y1 = points[3];
	var x2 = points[4];
	var y2 = points[5];

	var i, t, t2, t3, dt;
	var xt1, xt2, xt3, yt1, yt2, yt3, px, py;
	var pointsout = [];

	if(points.count < 7)
	{
		xt1 = -2 * x0 + 2 * x1;
		xt2 = x0 - 2 * x1 + x2;
		yt1 = -2 * y0 + 2 * y1;
		yt2 = y0 - 2 * y1 + y2;
		if(selectedpoint >= 0)
		{
			t = selectedpoint / (needpointnum - 1);
			t2 = t * t;
			px = xt2 * t2 + xt1 * t + x0;
			py = yt2 * t2 + yt1 * t + y0;
			pointsout.add((int)(px + 0.5));
			pointsout.add((int)(py + 0.5));
		}
		else
		{
			dt = 1 / (needpointnum - 1);
			t = 0;
			for(i=0; i<needpointnum; i++)
			{
				t2 = t * t;
				px = xt2 * t2 + xt1 * t + x0;
				py = yt2 * t2 + yt1 * t + y0;
				pointsout.add((int)(px + 0.5));
				pointsout.add((int)(py + 0.5));
				t += dt;
			}
		}
	}
	else
	{
		var x3 = points[6];
		var y3 = points[7];
		xt1 = -3 * x0 + 3 * x1;
		xt2 = 3 * x0 - 6 * x1 + 3 * x2;
		xt3 = -x0 + 3 * x1 - 3 * x2 + x3;
		yt1 = -3 * y0 + 3 * y1;
		yt2 = 3 * y0 - 6 * y1 + 3 * y2;
		yt3 = -y0 + 3 * y1 - 3 * y2 + y3;
		if(selectedpoint >= 0)
		{
			t = selectedpoint / (needpointnum - 1);
			t2 = t * t;
			t3 = t2 * t;
			px = xt3 * t3 + xt2 * t2 + xt1 * t + x0;
			py = yt3 * t3 + yt2 * t2 + yt1 * t + y0;
			pointsout.add((int)(px + 0.5));
			pointsout.add((int)(py + 0.5));
		}
		else
		{
			dt = 1 / (needpointnum - 1);
			t = 0;
			for(i=0; i<needpointnum; i++)
			{
				t2 = t * t;
				t3 = t2 * t;
				px = xt3 * t3 + xt2 * t2 + xt1 * t + x0;
				py = yt3 * t3 + yt2 * t2 + yt1 * t + y0;
				pointsout.add((int)(px + 0.5));
				pointsout.add((int)(py + 0.5));
				t += dt;
			}
		}
	}
	return pointsout;
}


// 根据多个点绘制连续曲线
// 这个函数是基于bezier曲线的(主要是3次bezier曲线)。但是，因为有多条bezier曲线相连接的连接点存在，这些连接点的位置的曲线可能并不平滑。
// layer 			目标Layer
// points			各个点的坐标的数组(格式为[x1, y1, x2, y2, ...])至少3个点
// color			颜色(0xAARRGGBB)
// 注 上面的坐标参数都是以图层中的图像为参照的，而不是以图层为参照。当然，通常情况下，图层中的图像和图层本身的位置/尺寸是相同的
function drawBezier(layer, points, color)
{
	if(layer === void || !(points instanceof "Array") || points.count < 6)
		return;
	
	var pcount = points.count \ 2;
	var i, l, needpointnum, dx, dy, xs, ys, xe, ye, linenum, idx;
	var pointbuf = [];
	var pointbezier;
	if(pcount <= 4) // 一条bezier曲线就够了
	{
		needpointnum = 0;
		for(i=0; i<pcount-1; i++)//计算点的密度
		{
			dx = points[i * 2 + 2] - points[i * 2];
			dy = points[i * 2 + 3] - points[i * 2 + 1];
			needpointnum += (int)Math.sqrt(dx * dx + dy * dy);
		}
		pointbezier = getBezierPoints(needpointnum, -1, points);//计算点的坐标
		
		xs = points[0];
		ys = points[1];
		for(i=0; i<needpointnum; i++)//绘制
		{
			xe = pointbezier[i * 2];
			ye = pointbezier[i * 2 + 1];
			drawLine(layer, xs, ys, xe, ye, color);
			xs = xe;
			ys = ye;
		}
	}
	else // 多条bezier曲线连接
	{
		// 刚开始的一段
		needpointnum = 0;
		pointbuf.clear();
		idx = 0;
		for(i=0; i<3; i++)
		{
			pointbuf.add(points[idx]);
			pointbuf.add(points[idx + 1]);
			idx += 2;
		}
		pointbuf.add((int)((points[idx] + points[idx - 2]) / 2));
		pointbuf.add((int)((points[idx + 1] + points[idx - 1]) / 2));
		
		for(i=0; i<3; i++)
		{
			dx = pointbuf[i * 2 + 2] - pointbuf[i * 2];
			dy = pointbuf[i * 2 + 3] - pointbuf[i * 2 + 1];
			needpointnum += (int)Math.sqrt(dx * dx + dy * dy);
		}
		
		pointbezier = getBezierPoints(needpointnum, -1, pointbuf);
		
		xs = pointbuf[0];
		ys = pointbuf[1];
		for(i=0; i<needpointnum; i++)
		{
			xe = pointbezier[i * 2];
			ye = pointbezier[i * 2 + 1];
			drawLine(layer, xs, ys, xe, ye, color);
			xs = xe;
			ys = ye;
		}
		pointbuf[0] = pointbuf[6];
		pointbuf[1] = pointbuf[7];

		// 中间的各段
		linenum = (pcount-5)/2;
		for(l=0; l<linenum; l++)
		{
			needpointnum = 0;
			pointbuf[2] = points[idx++];
			pointbuf[3] = points[idx++];
			pointbuf[4] = points[idx++];
			pointbuf[5] = points[idx++];
			pointbuf[6] = (int)((pointbuf[4] + points[idx]) / 2);
			pointbuf[7] = (int)((pointbuf[5] + points[idx + 1]) / 2);
			
			for(i=0; i<3; i++)
			{
				dx = pointbuf[i * 2 + 2] - pointbuf[i * 2];
				dy = pointbuf[i * 2 + 3] - pointbuf[i * 2 + 1];
				needpointnum += (int)Math.sqrt(dx * dx + dy * dy);
			}
			
			pointbezier = getBezierPoints(needpointnum, -1, pointbuf);

			xs = pointbuf[0];
			ys = pointbuf[1];
			for(i=0; i<needpointnum; i++)
			{
				xe = pointbezier[i * 2];
				ye = pointbezier[i * 2 + 1];
				drawLine(layer, xs, ys, xe, ye, color);
				xs = xe;
				ys = ye;
			}
			pointbuf[0] = pointbuf[6];
			pointbuf[1] = pointbuf[7];
		}
		
		//最后的一段
		if(pcount%2 == 0)
		{
			needpointnum = 0;
			pointbuf[2] = points[idx++];
			pointbuf[3] = points[idx++];
			pointbuf[4] = points[idx++];
			pointbuf[5] = points[idx++];
			pointbuf[6] = points[idx++];
			pointbuf[7] = points[idx++];

			for(i=0; i<3; i++)
			{
				dx = pointbuf[i * 2 + 2] - pointbuf[i * 2];
				dy = pointbuf[i * 2 + 3] - pointbuf[i * 2 + 1];
				needpointnum += (int)Math.sqrt(dx * dx + dy * dy);
			}
			
			pointbezier = getBezierPoints(needpointnum, -1, pointbuf);

			xs = pointbuf[0];
			ys = pointbuf[1];
			for(i=0; i<needpointnum; i++)
			{
				xe = pointbezier[i * 2];
				ye = pointbezier[i * 2 + 1];
				drawLine(layer, xs, ys, xe, ye, color);
				xs = xe;
				ys = ye;
			}
		}
		else
		{
			needpointnum = 0;
			pointbuf[2] = points[idx++];
			pointbuf[3] = points[idx++];
			pointbuf[4] = points[idx++];
			pointbuf[5] = points[idx++];
			pointbuf.erase(7);
			pointbuf.erase(6);

			for(i=0; i<2; i++)
			{
				dx = pointbuf[i * 2 + 2] - pointbuf[i * 2];
				dy = pointbuf[i * 2 + 3] - pointbuf[i * 2 + 1];
				needpointnum += (int)Math.sqrt(dx * dx + dy * dy);
			}
			
			pointbezier = getBezierPoints(needpointnum, -1, pointbuf);

			xs = pointbuf[0];
			ys = pointbuf[1];
			for(i=0; i<needpointnum; i++)
			{
				xe = pointbezier[i * 2];
				ye = pointbezier[i * 2 + 1];
				drawLine(layer, xs, ys, xe, ye, color);
				xs = xe;
				ys = ye;
			}
		}
	}
}