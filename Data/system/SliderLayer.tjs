// SliderLayer.tjs - スライダーレイヤ
// Copyright (C)2001-2002, W.Dee  改変?配布は自由です

/**
 * スライダとして動作するレイヤです
 * ※現時点では縦書き非対応
 */
class SliderLayer extends KAGLayer
{
    // ベース画像
    var baseImage;
    // タブ画像
    var tabImage;

    // 縦スライダ
    var vertical;
    
    var Slider_min = 0;   // 最小値
    var Slider_max = 100; // 最大値
    var Slider_position = 0; // 位置
	var Slider_tabWidth = 10; // つまみサイズ
    var Slider_tabHeight = 10; // つまみサイズ（縦用)
    var Slider_dragging = false; // ドラッグ中かどうか
	var Slider_dragOriginX; // ドラッグ開始 X 位置
    var Slider_dragOriginY; // ドラッグ開始 Y 位置
    var Slider_mouseOn = false; // マウスが領域内にあるかどうか

    var Slider_color = clWindow; // 背景色
    var Slider_opacity = 192; // 不透明度

    var nohilight; // ハイライトしない
    
    /**
     * コンストラクタ
     */
	function SliderLayer(win, par, vertical=false)
	{
		super.Layer(win, par);

		focusable = true; // フォーカスを得られる
		hitType = htMask;
		hitThreshold = 0;
        this.vertical = vertical;
    }

    
	function finalize()
	{
        if (baseImage !== void) { invalidate baseImage; }
        if (tabImage !== void) { invalidate tabImage; }
        super.finalize(...);
	}

	function assign(src)
	{
		// src の情報をこのオブジェクトにコピー
		Slider_min = src.Slider_min;
		Slider_max = src.Slider_max;
        Slider_position = src.Slider_position;
        Slider_color    = src.Slider_color;
    }

	function onPaint()
	{
		// onPaint イベント
		// レイヤの内容を描画する
		super.onPaint(...);

        // よく使う値をローカル変数に用意する
        var imw = imageWidth, imh = imageHeight;
        
        if (baseImage !== void) {
            copyRect(0, 0, baseImage, 0, 0, imw, imh);
        } else {
            // 下敷きを塗る
            fillRect(0, 0, imw, imh, 0);
                colorRect(0, 0, imw, imh, Slider_color, Slider_opacity);
        }
        
        if (focused && !nohilight)	{
            // フォーカスがあるのでハイライトする
            colorRect(0, 0, width-1, 1, clHighlight, 0);
            colorRect(0, 1, 1, height-2, clHighlight, 0);
            colorRect(0, height-1, width, 1, clHighlight, 0);
            colorRect(width-1, 0, 1, height-1, clHighlight, 0);
        }
        
        if (vertical) {

            var tabh = Slider_tabHeight;
            var htabh = tabh >> 1;
            
            // 中央のへこみ線
            //if (baseImage === void) {
            //var himh = imh >> 1;
            //var right = imw - tabh;
            //fillRect(htabh, himh - 1, right, 1, 0x80000000);
            //fillRect(htabh, himh    , right, 1, 0x80ffffff);
            //}
            
            // タブ
            var pos_y = int(
                (Slider_position-Slider_min) * (imh - tabh - 2)/(Slider_max - Slider_min)) +
                htabh + 1;
            var x_htabh = pos_y - htabh;
            
            if (tabImage !== void) {
                
                var tabw = Slider_tabWidth;
                var tabx = (imw - tabw) / 2;

                if (Slider_dragging) {
                    // on
                    operateRect(tabx, x_htabh, tabImage, tabw, 0, tabw, tabh);
                } else if (Slider_mouseOn) {
                    // over
                    operateRect(tabx, x_htabh, tabImage, tabw*2, 0, tabw, tabh);
                } else {
                    // normal
                    operateRect(tabx, x_htabh, tabImage, 0, 0, tabw, tabh);
                }
                
            } else {
                fillRect(0, x_htabh, imw, tabh, 0xffffff + (nodeEnabled ? 0 : 0xc0000000));
                if (Slider_mouseOn) {
                    colorRect(0, x_htabw, imw, tabh, clHighlight, 64);
                }
                colorRect(0, x_htabh + 1, 1, tabh-2, 0xffffff, 128);
                colorRect(imw - 1, x_htabh + 1, 1, tabh-2, 0x000000, 128);
                colorRect(0, x_htabh, width, 1, 0xffffff, 128);
                colorRect(0, pos_y + htabh - 1, width, 1, 0x000000, 128);
            }

            
        } else {

            var tabw = Slider_tabWidth;
            var htabw = tabw >> 1;
            
            // 中央のへこみ線
            //if (baseImage === void) {
            //var himh = imh >> 1;
            //var right = imw - tabw;
            //fillRect(htabw, himh - 1, right, 1, 0x80000000);
            //fillRect(htabw, himh    , right, 1, 0x80ffffff);
            //}
            
            // タブ
            var pos_x = int(
                (Slider_position-Slider_min) * (imw - tabw - 2)/(Slider_max - Slider_min)) +
                htabw + 1;
            var x_htabw = pos_x - htabw;
            
            if (tabImage !== void) {
                
                var tabh = Slider_tabHeight;
                var taby = (imh - tabh) / 2;
                
                if (Slider_dragging) {
                    // on
                    operateRect(x_htabw, taby, tabImage, tabw, 0, tabw, tabh);
                } else if (Slider_mouseOn) {
                    // over
                    operateRect(x_htabw, taby, tabImage, tabw*2, 0, tabw, tabh);
                } else {
                    // normal
                    operateRect(x_htabw, taby, tabImage, 0, 0, tabw, tabh);
                }
                
            } else {
                fillRect(x_htabw, 0, tabw, imh, 0xffffff + (nodeEnabled ? 0 : 0xc0000000));
                if (Slider_mouseOn) {
                    colorRect(x_htabw, 0, tabw, imh, clHighlight, 64);
                }
                colorRect(x_htabw + 1, 0, tabw-2, 1, 0xffffff, 128);
                colorRect(x_htabw + 1, imh - 1, tabw-2, 1, 0x000000, 128);
                colorRect(x_htabw, 0, 1, height, 0xffffff, 128);
                colorRect(pos_x + htabw - 1, 0, 1, height, 0x000000, 128);
            }
        }
	}

    function toMax() {
        position = Slider_position = Slider_max;
    }

    function toMin() {
        position = Slider_position = Slider_min;
    }
    
    function toLeft() {
        if (vertical) {
            position = Slider_position - int((Slider_max - Slider_min)/ (Slider_tabHeight-2) );
        } else {
            position = Slider_position - int((Slider_max - Slider_min)/ (Slider_tabWidth-2));
        }
    }

    function toRight() {
        if (vertical) {
            position = Slider_position + int((Slider_max - Slider_min) / (Slider_tabHeight-2));
        } else {
            position = Slider_position + int((Slider_max - Slider_min) / (Slider_tabWidth-2));
        }
    }
    
	function onKeyDown(key, shift, process)
	{
		// キーが押された
		if(process)
		{
			if(key == VK_LEFT)
			{
				// 左
				if(shift & ssAlt)
					position = Slider_position - 1;
				else
                    toLeft();
                super.onKeyDown(key, shift, false); // 処理をしたのでprocessにfalseを渡す
			}
			else if(key == VK_RIGHT)
			{
				// 左
				if(shift & ssAlt)
                    position = Slider_position + 1;
                else
                    toRight();
                super.onKeyDown(key, shift, false); // 処理をしたのでprocessにfalseを渡す
			}
			else
			{
				super.onKeyDown(...);
			}
		}
		else
		{
			// process が false の場合は処理は行わない
			super.onKeyDown(...);
		}
	}

	function onMouseDown(x, y, button)
	{
		// マウスボタンが押された
		focus();
		super.onMouseDown(...);

        if (button == mbLeft) {
            if (vertical) {
                var tabh = Slider_tabHeight;
                var htabh = tabh >> 1;
                var pos_y = int(
                    (Slider_position-Slider_min) * (imageHeight - tabh - 2)/(Slider_max - Slider_min)) +
                    htabh + 1;
                if(pos_y - htabh > y) {
                    // タブより下
                    position = Slider_position - int((Slider_max - Slider_min)/ (tabh-2));
                } else if(pos_y + htabh < y) {
                    // タブより上
                    position = Slider_position + int((Slider_max - Slider_min)/ (tabh-2));
                } else {
                    // タブ
                    // タブのドラッグを開始
                    Slider_dragging = true;
                    Slider_dragOriginY = y - pos_y;
                }
            } else {
                var tabw = Slider_tabWidth;
                var htabw = tabw >> 1;
                var pos_x = int(
                    (Slider_position-Slider_min) * (imageWidth - tabw - 2)/(Slider_max - Slider_min)) +
                    htabw + 1;
                if(pos_x - htabw > x) {
                    // タブより左
                    position = Slider_position - int((Slider_max - Slider_min)/ (tabw-2));
                } else if(pos_x + htabw < x) {
                    // タブより右
                    position = Slider_position + int((Slider_max - Slider_min)/ (tabw-2));
                } else {
                    // タブ
                    // タブのドラッグを開始
                    Slider_dragging = true;
                    Slider_dragOriginX = x - pos_x;
                }
            }
        }
	}

	function onMouseUp(x, y, button)
	{
		// マウスボタンが離された
		super.onMouseUp(...);
        if (Slider_dragging) {
            Slider_dragging = false;
            position = position;
        }
	}

	function onMouseMove(x, y)
	{
		// マウスが移動した
		super.onMouseMove(...);

		if(Slider_dragging)
		{
            if (vertical) {
                // タブをドラッグ
                position = int(
                    (y - Slider_dragOriginY - (Slider_tabHeight >> 1)) * (Slider_max - Slider_min) /
                    (imageHeight - Slider_tabHeight - 2) + Slider_min);
            } else {
                // タブをドラッグ
                position = int(
                    (x - Slider_dragOriginX - (Slider_tabWidth >> 1)) * (Slider_max - Slider_min) /
                    (imageWidth - Slider_tabWidth - 2) + Slider_min);
            }
		}
	}

	function onMouseEnter()
	{
		// マウスがレイヤ領域内に入った
		update();
		Slider_mouseOn = true;
		super.onMouseEnter(...);
	}

	function onMouseLeave()
	{
		// マウスがレイヤ領域から出ていった
		update();
		Slider_mouseOn = false;
		Slider_dragging = false;
		super.onMouseLeave(...);
	}

	function onFocus()
	{
		// フォーカスを得た
		super.onFocus(...);
		update();
	}

	function onBlur()
	{
		// フォーカスを失った
		super.onBlur(...);
		update();
	}

	function onNodeDisabled()
	{
		// レイヤのノードが不可になった
		super.onNodeDisabled(...);
		update();
	}

	function onNodeEnabled()
	{
		// レイヤのノードが有効になった
		super.onNodeEnabled(...);
		update();
	}

	property width
	{
		setter(x)
		{
            super.width = x;
			imageWidth = x;
			update();
		}
		getter
		{
			return super.width;
		}
	}
	
	property height
	{
		setter(x)
		{
			super.height = x;
			imageHeight = x;
			update();
		}
		getter
		{
			return super.height;
		}
	}

	property color
	{
		setter(x)
		{
            Slider_color = int x;
			update();
		}
		getter
		{
			return Slider_color;
		}
	}

	property bgOpacity
	{
		setter(x)
		{
            Slider_opacity = int x;
			update();
		}
		getter
		{
            return Slider_opacity;
		}
	}
    
	property max
	{
		setter(x)
		{
			Slider_max = x;
			update();
		}
		getter
		{
			return Slider_max;
		}
	}
	
	property min
	{
		setter(x)
		{
			Slider_min = x;
			update();
		}
		getter
		{
			return Slider_min;
		}
	}
	
	property position
	{
		setter(x)
		{
            if(x < Slider_min) x = Slider_min;
            if(x > Slider_max) x = Slider_max;
            //dm("slider position:" + x);
            Slider_position = x;
            update();
            onChange(Slider_position, Slider_dragging);
        }
		getter
		{
			return Slider_position;
		}
	}

	function onChange(pos, dragging)
	{
	}

    /**
     * ベース画像を読み込む
     * @param storage 画像。このサイズのボタンになる
     */
    function loadBase(storage, key)
	{
        if (baseImage === void) {
            baseImage = new global.Layer(window, parent);
        }
        baseImage.loadImages(storage, key);
        baseImage.setSizeToImageSize();
        width  = baseImage.width;
        height = baseImage.height;
    }

    /**
     * タブ画像を読み込む
     * @param storage 画像  通常/押し下げ/オーバーが連結された画像
     */
    function loadTab(storage, key) {
        if (tabImage === void) {
            tabImage = new global.Layer(window, parent);
        }
        tabImage.loadImages(storage, key);
        tabImage.setSizeTOImageSize();
        Slider_tabWidth  = tabImage.imageWidth / 3;
        Slider_tabHeight = tabImage.imageHeight;
    }
    
    /**
     * 分離ボタン画像の読み込み
     * @param normal 通常時画像
     * @param over オーバー時画像
     * @param on 押し下げ時画像
     */
    function loadTabs(normal, over, on) {
        if (tabImage === void) {
            tabImage = new global.Layer(window, parent);
        }
        var temp = window.temporaryLayer;
        temp.loadImages(normal);
        var w = temp.imageWidth;
        var h = temp.imageHeight;
        tabImage.imageWidth  = w * 3;
        tabImage.imageHeight = h;
        tabImage.copyRect(0, 0, temp, 0, 0, w, h);
        if (over !== void) {
            temp.loadImages(over);
        }
        tabImage.copyRect(w*2, 0, temp, 0, 0, w, h);
        if (on !== void) {
            temp.loadImages(on);
        }
        tabImage.copyRect(w, 0, temp, 0, 0, w, h);
        Slider_tabWidth = w;
        Slider_tabHeight = h;
    }

}

